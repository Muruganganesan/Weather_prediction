import streamlit as st
import requests
from datetime import datetime
from collections import defaultdict

# тЬЕ Page config FIRST
st.set_page_config(page_title="роЕроЯрпБродрпНрод 5 роиро╛ро│рпБроХрпНроХро╛рой ро╡ро╛ройро┐ро▓рпИ ", layout="centered")

# тЬЕ THEN styling and rest of UI
st.markdown("""
    <style>
        .main {
            background-color: #f0f4f8;
        }
        .weather-card {
            background: #fff;
            border-radius: 12px;
            box-shadow: 0 2px 8px rgba(0,0,0,0.07);
            padding: 1.5em;
            margin-bottom: 1em;
        }
        .emoji {
            font-size: 2em;
            vertical-align: middle;
        }
    </style>
""", unsafe_allow_html=True)


API_KEY = "41e60832c39381685cf06ee0f1cc61f5"
BASE_URL = "http://api.openweathermap.org/data/2.5/forecast"

tamil_weather = {
    "clear sky": "роиро┐ро▒рпИроп ро╡ро╛ройроорпН",
    "scattered clouds": "роЪро┐ро▓ роорпЗроХроЩрпНроХро│рпН",
    "overcast clouds": "роЕроЯро░рпНроирпНрод роорпЗроХроЩрпНроХро│рпН",
    "light rain": "роЗро▓рпЗроЪро╛рой рооро┤рпИ",
    "few clouds": "роЪро┐ро▓ роорпЗроХроЩрпНроХро│рпН",
    "moderate rain": "рооро┐родрооро╛рой рооро┤рпИ"
}

#st.set_page_config(page_title="5 роиро╛ро│рпН ро╡ро╛ройро┐ро▓рпИ", layout="centered")
st.title("тШБя╕П ро╡ро╛ройро┐ро▓рпИ роорпБройрпНройро▒ро┐ро╡ро┐рокрпНрокрпБ")
st.markdown("ЁЯМЗ **роЙроЩрпНроХро│рпН роироХро░родрпНродрпИродрпН родрпЗро░рпНроирпНродрпЖроЯрпБродрпНродрпБ роЕроЯрпБродрпНрод 5 роиро╛роЯрпНроХро│рпБроХрпНроХро╛рой ро╡ро╛ройро┐ро▓рпИ родрпЖро░ро┐роирпНродрпБроХрпКро│рпНро│рпБроЩрпНроХро│рпН.**")

city = st.text_input("ЁЯПЩя╕П роироХро░родрпНродро┐ройрпН рокрпЖропро░рпИ роЙро│рпНро│ро┐роЯро╡рпБроорпН")

@st.cache_data(ttl=3600)
def fetch_weather(city):
    params = {'q': city, 'appid': API_KEY, 'units': 'metric'}
    response = requests.get(BASE_URL, params=params)
    if response.status_code == 200:
        return response.json()
    else:
        return None

if st.button("ЁЯМдя╕П ро╡ро╛ройро┐ро▓рпИ рокро╛ро░рпНроХрпНроХ"):
    with st.spinner("родроХро╡ро▓рпНроХро│рпИ рокрпЖро▒рпБроХро┐ро▒родрпБ..."):
        data = fetch_weather(city)
        if data:
            forecasts = data['list']
            daily_forecast = defaultdict(list)
            for entry in forecasts:
                dt_txt = entry['dt_txt']
                date_str = dt_txt.split()[0]
                time_str = dt_txt.split()[1]
                temp = entry['main']['temp']
                desc = entry['weather'][0]['description']
                daily_forecast[date_str].append((time_str, temp, desc))

            st.success(f"**{city}** роироХро░родрпНродро┐ройрпН роЕроЯрпБродрпНрод 5 роиро╛роЯрпНроХро│рпБроХрпНроХро╛рой ро╡ро╛ройро┐ро▓рпИ:")
            for date, infos in list(daily_forecast.items())[:5]:
                readable_date = datetime.strptime(date, "%Y-%m-%d").strftime("%d-%m-%Y")
                with st.container():
                    st.markdown(f"<div class='weather-card'><b>ЁЯУЕ {readable_date}</b>", unsafe_allow_html=True)
                    cols = st.columns(len(infos))
                    for i, (time, temp, desc) in enumerate(infos):
                        desc_tamil = tamil_weather.get(desc, desc)
                        emoji = "тШАя╕П" if "clear" in desc else "ЁЯМзя╕П" if "rain" in desc else "тШБя╕П"
                        with cols[i]:
                            st.markdown(
                                f"<span class='emoji'>{emoji}</span> <b>{time}</b><br>"
                                f"ЁЯМбя╕П <b>{temp}┬░C</b><br>"
                                f"тШБя╕П {desc} тЖТ <i>{desc_tamil}</i>",
                                unsafe_allow_html=True
                            )
                    st.markdown("</div>", unsafe_allow_html=True)
        else:
            st.error("тЭМ роироХро░роорпН роХро┐роЯрпИроХрпНроХро╡ро┐ро▓рпНро▓рпИ. роЪро░ро┐ропро╛роХродрпН Type роЪрпЖропрпНродрпАро░рпНроХро│ро╛?")

